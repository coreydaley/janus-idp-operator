apiVersion: v1
data:
  app-config.yaml: |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: my-backstage-config-cm1 # placeholder for <bs>-default-appconfig
    data:
      default.app-config.yaml: |
        backend:
          auth:
            externalAccess:
              - type: legacy
                options:
                  subject: legacy-default-config
                  # This is a default value, which you should change by providing your own app-config
                  secret: "pl4s3Ch4ng3M3"
  db-secret.yaml: |-
    apiVersion: v1
    kind: Secret
    metadata:
      name: postgres-secrets # will be replaced
    type: Opaque
    #stringData:
    #  POSTGRES_PASSWORD:
    #  POSTGRES_PORT: "5432"
    #  POSTGRES_USER: postgres
    #  POSTGRESQL_ADMIN_PASSWORD: admin123
    #  POSTGRES_HOST: bs1-db-service    #placeholder <crname>-db-service
  db-service.yaml: |
    apiVersion: v1
    kind: Service
    metadata:
      name: backstage-psql # placeholder for 'backstage-psql-<cr-name>' .NOTE: For the time it is static and linked to Secret-> postgres-secrets -> OSTGRES_HOST
    spec:
      selector:
        rhdh.redhat.com/app:  backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
      clusterIP: None
      ports:
        - port: 5432
  db-statefulset.yaml: |-
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
    spec:
      podManagementPolicy: OrderedReady
      replicas: 1
      selector:
        matchLabels:
          rhdh.redhat.com/app: backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
      serviceName: backstage-psql-cr1-hl # placeholder for 'backstage-psql-<cr-name>-hl'
      template:
        metadata:
          labels:
            rhdh.redhat.com/app: backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
        spec:
          # fsGroup does not work for Openshift
          # AKS/EKS does not work w/o it
          #securityContext:
          #  fsGroup: 26
          automountServiceAccountToken: false
          ## https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/
          ## The optional .spec.persistentVolumeClaimRetentionPolicy field controls if and how PVCs are deleted during the lifecycle of a StatefulSet.
          ## You must enable the StatefulSetAutoDeletePVC feature gate on the API server and the controller manager to use this field.
    #      persistentVolumeClaimRetentionPolicy:
    #        whenDeleted: Retain
    #        whenScaled: Retain
          containers:
            - env:
                - name: POSTGRESQL_PORT_NUMBER
                  value: "5432"
                - name: POSTGRESQL_VOLUME_DIR
                  value: /var/lib/pgsql/data
                - name: PGDATA
                  value: /var/lib/pgsql/data/userdata
              image: quay.io/fedora/postgresql-15:latest # will be replaced with the actual image
              imagePullPolicy: IfNotPresent
              securityContext:
                # runAsUser:26 does not work for Openshift but looks work for AKS/EKS
                # runAsUser: 26
                runAsGroup: 0
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                seccompProfile:
                  type: RuntimeDefault
                capabilities:
                  drop:
                    - ALL
              livenessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432
                failureThreshold: 6
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              name: postgresql
              ports:
                - containerPort: 5432
                  name: tcp-postgresql
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - -e
                    - |
                      exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              resources:
                requests:
                  cpu: 250m
                  memory: 256Mi
                limits:
                  cpu: 250m
                  memory: 1024Mi
                  ephemeral-storage: 20Mi
              volumeMounts:
                - mountPath: /dev/shm
                  name: dshm
                - mountPath: /var/lib/pgsql/data
                  name: data
          restartPolicy: Always
          serviceAccountName: default
          volumes:
            - emptyDir:
                medium: Memory
              name: dshm
      updateStrategy:
        rollingUpdate:
          partition: 0
        type: RollingUpdate
      volumeClaimTemplates:
        - apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
  deployment.yaml: "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backstage
    # placeholder for 'backstage-<cr-name>'\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n
    \     rhdh.redhat.com/app:  # placeholder for 'backstage-<cr-name>'\n  template:\n
    \   metadata:\n      labels:\n        rhdh.redhat.com/app:  # placeholder for
    'backstage-<cr-name>'\n    spec:\n      automountServiceAccountToken: false\n
    \     # if securityContext not present in AKS/EKS, the error is like this:\n      #Error:
    EACCES: permission denied, open '/dynamic-plugins-root/backstage-plugin-scaffolder-backend-module-github-dynamic-0.2.2.tgz'\n
    \     # fsGroup doesn not work for Openshift\n      #securityContext:\n      #
    \  fsGroup: 1001\n      volumes:\n        - ephemeral:\n            volumeClaimTemplate:\n
    \             spec:\n                accessModes:\n                  - ReadWriteOnce\n
    \               resources:\n                  requests:\n                    storage:
    2Gi\n          name: dynamic-plugins-root\n        - name: dynamic-plugins-npmrc\n
    \         secret:\n            defaultMode: 420\n            optional: true\n
    \           secretName: dynamic-plugins-npmrc\n        - emptyDir: {}\n          name:
    npmcacache\n        - name: audit-log-data \n          persistentVolumeClaim:
    \n            claimName: audit-log-pvc # placeholder for audit log pvc name\n
    \     initContainers:\n        - name: install-dynamic-plugins\n          command:\n
    \           - ./install-dynamic-plugins.sh\n            - /dynamic-plugins-root\n
    \         # image will be replaced by the value of the `RELATED_IMAGE_backstage`
    env var, if set\n          image: quay.io/janus-idp/backstage-showcase:next\n
    \         imagePullPolicy: IfNotPresent\n          securityContext:\n            runAsNonRoot:
    true\n            allowPrivilegeEscalation: false\n            seccompProfile:\n
    \             type: RuntimeDefault\n            capabilities:\n              drop:\n
    \              - ALL\n          env:\n            - name: NPM_CONFIG_USERCONFIG\n
    \             value: /opt/app-root/src/.npmrc.dynamic-plugins\n          volumeMounts:\n
    \           - mountPath: /dynamic-plugins-root\n              name: dynamic-plugins-root\n
    \           - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins\n              name:
    dynamic-plugins-npmrc\n              readOnly: true\n              subPath: .npmrc\n
    \           - mountPath: /opt/app-root/src/.npm/_cacache\n              name:
    npmcacache\n          workingDir: /opt/app-root/src\n          resources:\n            requests:\n
    \             cpu: 250m\n              memory: 256Mi\n            limits:\n              cpu:
    1000m\n              memory: 2.5Gi\n              ephemeral-storage: 5Gi\n      containers:\n
    \       - name: backstage-backend\n          # image will be replaced by the value
    of the `RELATED_IMAGE_backstage` env var, if set\n          image: quay.io/janus-idp/backstage-showcase:next\n
    \         imagePullPolicy: IfNotPresent\n          args:\n            - \"--config\"\n
    \           - \"dynamic-plugins-root/app-config.dynamic-plugins.yaml\"\n          securityContext:\n
    \           capabilities:\n              drop:\n                - ALL\n            seccompProfile:\n
    \             type: RuntimeDefault\n            runAsNonRoot: true\n            allowPrivilegeEscalation:
    false\n          readinessProbe:\n            failureThreshold: 3\n            httpGet:\n
    \             path: /healthcheck\n              port: 7007\n              scheme:
    HTTP\n            initialDelaySeconds: 30\n            periodSeconds: 10\n            successThreshold:
    2\n            timeoutSeconds: 2\n          livenessProbe:\n            failureThreshold:
    3\n            httpGet:\n              path: /healthcheck\n              port:
    7007\n              scheme: HTTP\n            initialDelaySeconds: 60\n            periodSeconds:
    10\n            successThreshold: 1\n            timeoutSeconds: 2\n          ports:\n
    \           - name: backend\n              containerPort: 7007\n          env:\n
    \           - name: APP_CONFIG_backend_listen_port\n              value: \"7007\"\n
    \         volumeMounts:\n            - mountPath: /opt/app-root/src/dynamic-plugins-root\n
    \             name: dynamic-plugins-root\n            - mountPath: /var/log/audit\n
    \             name: audit-log-data\n          resources:\n            requests:\n
    \             cpu: 250m\n              memory: 256Mi\n            limits:\n              cpu:
    1000m\n              memory: 2.5Gi\n              ephemeral-storage: 5Gi\n"
  dynamic-plugins.yaml: |-
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: default-dynamic-plugins #  must be the same as (deployment.yaml).spec.template.spec.volumes.name.dynamic-plugins-conf.configMap.name
    data:
      "dynamic-plugins.yaml": |
        includes:
          - dynamic-plugins.default.yaml
        plugins: []
  route.yaml: |-
    apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: route # placeholder for 'backstage-<cr-name>'
    spec:
      port:
        targetPort: http-backend
      path: /
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name:  # placeholder for 'backstage-<cr-name>'
  secret-envs.yaml: |
    apiVersion: v1
    kind: Secret
    metadata:
      name: backend-auth-secret
    stringData:
      # generated with the command below (from https://janus-idp.io/docs/auth/service-to-service-auth/#setup):
      # node -p 'require("crypto").randomBytes(24).toString("base64")'
      BACKEND_SECRET: "R2FxRVNrcmwzYzhhN3l0V1VRcnQ3L1pLT09WaVhDNUEK" # notsecret
  service.yaml: |-
    apiVersion: v1
    kind: Service
    metadata:
      name: backstage # placeholder for 'backstage-<cr-name>'
    spec:
      type: ClusterIP
      selector:
        rhdh.redhat.com/app:  # placeholder for 'backstage-<cr-name>'
      ports:
        - name: http-backend
          port: 80
          targetPort: backend
kind: ConfigMap
metadata:
  name: backstage-default-config
